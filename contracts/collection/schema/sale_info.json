{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "SaleInfo",
  "type": "object",
  "required": [
    "duration_type",
    "initial_price",
    "provider",
    "requests",
    "sale_type",
    "sell_index",
    "token_id"
  ],
  "properties": {
    "duration_type": {
      "$ref": "#/definitions/DurationType"
    },
    "initial_price": {
      "$ref": "#/definitions/Uint128"
    },
    "provider": {
      "$ref": "#/definitions/Addr"
    },
    "requests": {
      "type": "array",
          "type": "string",
          "enum": [
            "Fixed"
          ]
        },
        {
          "type": "object",
          "required": [
            "Time"
          ],
          "properties": {
            "Time": {
              "type": "array",
              "items": [
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Bid"
          ],
          "properties": {
            "Bid": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Request": {
      "type": "object",
      "required": [
        "address",
        "price"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "price": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "SaleType": {
      "type": "string",
      "enum": [
        "Fixed",
        "Auction",
        "Offer"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
